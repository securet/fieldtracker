<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-2.0.xsd"
        default-menu-title="Search" default-menu-index="2">

    <transition name="submitSearch"><default-response url="."/></transition>

    <transition name="searchSuggest">
        <actions>
            <script>
                import org.apache.commons.collections.set.ListOrderedSet
                import org.elasticsearch.client.Client
                import org.elasticsearch.index.query.QueryBuilders
                import org.elasticsearch.search.SearchHit
                import org.elasticsearch.search.SearchHitField
                import org.elasticsearch.search.SearchHits
                import org.elasticsearch.search.highlight.HighlightField
                import org.moqui.context.ExecutionContext

                ExecutionContext ec = context.ec
                Client elasticSearchClient = ec.getTool("ElasticSearch", Client.class)

                org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("search_actions")

                ListOrderedSet optionList = new ListOrderedSet()

                indexName = "hivemind"
                queryString = "${term}*"

                // not passed through: .setTypes(documentType)
                SearchHits hits = elasticSearchClient.prepareSearch().setIndices(indexName)
                        .setQuery(QueryBuilders.queryStringQuery(queryString)).setSize(30)
                        .setHighlighterFragmentSize(30).setHighlighterNumOfFragments(3)
                        .setHighlighterForceSource(true).setHighlighterRequireFieldMatch(false)
                        .addHighlightedField("*").setHighlighterPreTags("*").setHighlighterPostTags("*")
                        .execute().actionGet().getHits()
                // .setHighlighterRequireFieldMatch(true).setHighlighterType("plain")
                // logger.warn("=========== queryString [${queryString}], hits ${hits.totalHits()}")
                for (SearchHit hit in hits) {
                    // logger.warn("=========== hit ${hit.getId()}; ${hit.getHighlightFields().values()}")
                    for (HighlightField hlf in hit.getHighlightFields().values()) {
                        optionList.addAll(hlf.fragments())
                    }
                }

                def outList = []
                for (String option in optionList) outList.add([value: option, label: option])
                ec.web.sendJsonResponse(outList)
            </script>
        </actions>
        <default-response type="none"/>
    </transition>
    <transition name="searchSuggestOld">
        <actions>
            <script>
                import org.elasticsearch.client.Client
                import org.elasticsearch.search.suggest.Suggest
                import org.elasticsearch.search.suggest.Suggest.Suggestion
                import org.elasticsearch.search.suggest.SuggestBuilder
                import org.elasticsearch.action.suggest.SuggestResponse
                import org.elasticsearch.search.suggest.phrase.DirectCandidateGenerator
                import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder
                import org.elasticsearch.search.suggest.term.TermSuggestionBuilder
                import org.elasticsearch.search.suggest.completion.CompletionSuggestionBuilder
                import org.elasticsearch.search.suggest.completion.CompletionSuggestionFuzzyBuilder
                import org.moqui.context.ExecutionContext

                org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger("search_actions")

                ExecutionContext ec = context.ec
                Client elasticSearchClient = ec.getTool("ElasticSearch", Client.class)
                indexName = "hivemind"
                // get this working - for whatever reason no suggestions come back in spite of trying dozens of combinations of parameters, maybe wait for next ES release...
                // see ES suggest docs at: http://www.elasticsearch.org/guide/reference/api/search/suggest/
                /* Suggest suggest = elasticSearchClient.prepareSuggest(indexName)
                .addSuggestion(new PhraseSuggestionBuilder("phraseSb").analyzer("body").maxErrors(1.0F)
                .addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator(field).suggestMode("always").minWordLength(2).sort("score").minDocFreq(0F).maxTermFreq(1.0F))
                .gramSize(2).confidence(0.0F).size(1).text(term))
                .execute().actionGet().getSuggest() */
                // .field(field).suggestMode("always").sort("score")

                // NOTE: this is probably a lost cause, have to setup specific _mapping, and the document must be in a
                //     certain structure, namely have an input field, see:
                // http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-suggesters-completion.html

                /* here is a start, setting these fields to completion, but they still don't have input elements:
                curl -X PUT localhost:9200/default__hivemind/HmTask/_mapping -d '{ "HmTask" : { "properties" : {
                "name" : { "type" : "completion" },
                "type" : { "type" : "completion" },
                "status" : { "type" : "completion" }
                } } }'

                NOTE that there is no good Java API for this, basically just XContentBuilder and
                XContentFactory.jsonBuilder() stuff to build the JSON through pretty ugly API calls
                */

                // It may be a better approach to do a normal search and find partially matching strings in the result...

                SuggestResponse suggestResponse = elasticSearchClient.prepareSuggest(indexName)
                .addSuggestion(new CompletionSuggestionFuzzyBuilder("name-suggest").field("name").text(term).size(20))
                .addSuggestion(new CompletionSuggestionFuzzyBuilder("type-suggest").field("type").text(term).size(20))
                .addSuggestion(new CompletionSuggestionFuzzyBuilder("status-suggest").field("status").text(term).size(20))
                .execute().actionGet()
                logger.warn("========= suggest term=${term}, suggest size=${suggestResponse.getSuggest().size()}")

                List optionList = []
                for (Suggestion suggestion in suggestResponse.getSuggest()) {
                for (Suggestion.Entry entry in suggestion.getEntries()) {
                String entryText = entry.getText()
                logger.warn("========== entryText [${entryText}] options size ${entry.getOptions().size()}")
                for (Suggestion.Entry.Option option in entry.getOptions()) {
                logger.warn("========== entryText [${entryText}], optionText [${option.getText()}]")
                optionList.add(option.getText())
                }
                }
                }

                def outList = []
                for (String option in optionList) outList.add([value: option, label: option])
                ec.web.sendJsonResponse(outList)
            </script>
        </actions>
        <default-response type="none"/>
    </transition>

    <actions>
        <if condition="queryString">
            <service-call name="org.moqui.search.SearchServices.search#DataDocuments" out-map="context"
                    in-map="context + [indexName:'hivemind']"/>
        </if>
    </actions>
    <widgets>
        <form-single name="SearchOptions" transition=".">
            <field name="documentType"><default-field title="">
                <drop-down allow-empty="true">
                    <entity-options key="${dataDocumentId}" text="${documentName}">
                        <entity-find entity-name="moqui.entity.document.DataDocument" cache="true">
                            <econdition field-name="indexName" value="hivemind"/><order-by field-name="documentName"/>
                        </entity-find>
                    </entity-options>
                </drop-down>
            </default-field></field>
            <field name="queryString"><default-field title="">
                <!-- <text-line size="40"/> -->
                <text-line ac-transition="searchSuggest" ac-min-length="3" size="50" ac-use-actual="true"/>
            </default-field></field>
            <field name="submitButton"><default-field title="Search"><submit/></default-field></field>
            <field-layout><field-row-big><field-ref name="documentType"/><field-ref name="queryString"/>
                <field-ref name="submitButton"/></field-row-big></field-layout>
        </form-single>

        <form-list name="SearchResults" list="documentList" paginate-always-show="true">
            <row-actions>
                <entity-find-one entity-name="moqui.entity.document.DataDocument" value-field="dataDocument" cache="true">
                    <field-map field-name="dataDocumentId" from="_type"/>
                </entity-find-one>
                <!-- this is a type=many relationship, but we just want one here: -->
                <entity-find-related-one value-field="dataDocument" cache="true"
                        relationship-name="moqui.entity.document.DataDocumentLink" to-value-field="dataDocumentLink"/>
                <set field="linkUrl" from="ec.web.getWebappRootUrl(false, null) + ec.resource.expand(dataDocumentLink?.linkUrl, '')"/>
                <set field="documentTitle" from="ec.web.getWebappRootUrl(false, null) + ec.resource.expand(dataDocument?.documentTitle, '')"/>
            </row-actions>
            <field name="type"><default-field><display text="${dataDocument.documentName}"/></default-field></field>
            <field name="id"><default-field><display text="${_id}"/></default-field></field>
            <field name="documentTitle"><default-field title="Title"><display/></default-field></field>
            <field name="link"><default-field>
                <link url="${linkUrl}" text="${dataDocumentLink.label}" link-type="anchor" url-type="${dataDocumentLink.urlType?:'plain'}"/>
            </default-field></field>
        </form-list>
    </widgets>
</screen>
